2)
juntar_con([[x],[x,y],[z]],a, R).
R = [x, a, x, y, a, z] ;
false.

juntar_con([[x],[y]],a,S).
S = [x, a, y] ;
false.

juntar_con([[x]],a,S).
S = [x] ;
false.

juntar_con([[x],[y],[z]],a,[x,a,y,a,z]).
true ;
false.

3)
ej(1, S), palabras(S, P).
S = [rombo, cuadrado, espacio, perro, cuadrado, sol, cuadrado],
P = [[rombo, cuadrado], [perro, cuadrado, sol, cuadrado]] ;
false.

palabras([a,b,a,espacio,c,espacio,b,d,d,espacio,a,b,c,espacio,d],M).
M = [[a, b, a], [c], [b, d, d], [a, b, c], [d]] ;
false.

palabras([espacio,a,b,a,espacio,espacio,espacio,c,espacio,b,d,d,espacio,a,b,c,espacio,espacio,d,espacio],M).
M = [[a, b, a], [c], [b, d, d], [a, b, c], [d]] ;
false.

palabras([a,b,a,c,espacio,b,d,d,espacio,a,b,c,d,espacio,espacio],M).
M = [[a, b, a, c], [b, d, d], [a, b, c, d]] ;
false.

palabras([espacio,espacio,a,b,a,c,espacio,b,d,d,espacio,c],M).
M = [[a, b, a, c], [b, d, d], [c]] ;
false.

3.aux)
separar_con([x,a,y,x,a,z],a,S).
S = [[x], [y, x], [z]] ;
false.

4)
asignar_var(rombo,[],M).
M=[(rombo, _G452)];
false.

asignar_var(rombo,[(rombo,a)],M).
M=[(rombo,a)];
false.

asignar_var(rombo,[],M),asignar_var(cuadrado,M,M2),asignar_var(rombo,M2,M3).
M=[(rombo, _G1020)],
M2=M3, M3=[(cuadrado,_G1026),(rombo, _G1020)];
false.

asignar_var(rombo,[],M),asignar_var(rombo,M,M2),asignar_var(cuadrado,M2,M3),asignar_var(perro,M3,M4),asignar_var(cuadrado,M4,M5).
M=M2, M2=[(rombo, _G3368)],
M3=[(cuadrado,_G3377),(rombo, _G3368)],
M4=M5, M5=[(perro,_G3392),(cuadrado,_G3377),(rombo, _G3368)];
false.

asignar_var(b,[(c,_),(b,_),(a,_)],MF).
1-A1<-b, MI <- [(c,_),(b,_),(a,_)] MF1<-MI si member((b,_),MI) => true
2-A2<-b, MI2<-[(c,_),(b,_),(a,_)], MF2<-[(b,_) | (c,_),(b,_),(a,_)] si not ( member ((b,_), MI) ) => false

5)
ej(1, S), palabras(S, P), palabras_con_variables(P, V).
S = [rombo, cuadrado, espacio, perro, cuadrado, sol, cuadrado],
P = [[rombo, cuadrado], [perro, cuadrado, sol, cuadrado]],
V = [[_G5231, _G5177], [_G5204, _G5177, _G5183, _G5177]] ;
false.

palabras_con_variables([],V).
V=[].

palabras_con_variables([[rombo,rombo]|[[rombo,cuadrado,rombo]|[[cuadrado,rombo,perro]]]],V).
V = [[_G6001, _G6001], [_G6001, _G6016, _G6001], [_G6016, _G6001, _G5995]] ;
false.

6)
quitar(z,[A,B,A,z],L).
L = [A, B, A] ;
false.

quitar(A,[A,B,A,z],L).
L = [B, z] ;
false.

quitar(a,[],L).
L=[].

quitar(A,[],L).
L=[].

quitar(A,[a,B,c,D],L).
L = [a, B, c, D].

quitar(b,[a,B,c,D],L).
L = [a, B, c, D].

7)
cant_distintos([A,B,A], N).
N=2;
false.

cant_distintos([A,A,A], N).
N=1;
false.

cant_distintos([a,A,A,B], N).
N=3;
false.

cant_distintos([a,A,a,B,B,c,c,A,D,A,A], N).
N=5;
false.

8)
cargar("10000_formas.txt").
tests_ej_8(1,S),descifrar(S,M).
S = [boca, racing, espacio, newells, boca, velez, boca, independiente, sarmiento|...],
M = "en determinados culturales" ;
false.

cargar("dicc0.txt").
ej(1, S), descifrar(S, M).
S = [rombo, cuadrado, espacio, perro, cuadrado, sol, cuadrado],
M = "la casa" ;
false.

9)
cargar("dicc1.txt").
ej(3, S), descifrar_sin_espacios(S, M).
S = [rombo, cuadrado, perro, cuadrado, sol, luna, triangulo, estrella, arbol|...],
M = "casa de flor" ;
S = [rombo, cuadrado, perro, cuadrado, sol, luna, triangulo, estrella, arbol|...],
M = "casa flor de" ;
S = [rombo, cuadrado, perro, cuadrado, sol, luna, triangulo, estrella, arbol|...],
M = "casa miento" ;
false.

10)
cargar("dicc1.txt").
ej(3, S), mensajes_mas_parejos(S, M).
S = [rombo, cuadrado, perro, cuadrado, sol, luna, triangulo, estrella, arbol|...],
M = "casa de flor" ;
S = [rombo, cuadrado, perro, cuadrado, sol, luna, triangulo, estrella, arbol|...],
M = "casa flor de" ;
false.
